import dependencies.Plugins
import dependencies.Versions

apply plugin: "com.github.ben-manes.versions"

allprojects {
    repositories {
        google()
        mavenCentral()
        jcenter()
    }

    // Show all compile time errors
    // See: https://movieos.org/2017/android-room-data-binding-compile-time-errors/
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "4000"
            options.compilerArgs << "-Xmaxwarns" << "4000"
        }
    }

    // Improve the build performance of Dagger by
    // 1. Not formatting the generated source code
    // 2. Turning on incremental compilation
    afterEvaluate {
        extensions.findByName("kapt")?.arguments {
            arg("dagger.formatGeneratedSource", "disabled")
            arg("dagger.gradle.incremental", "enabled")
        }
    }
}

subprojects { subProject ->
    configurations.all {
        resolutionStrategy {
            eachDependency { details ->
                // Force all of the Kotlin libraries to use the same version
                if (details.requested.group == 'org.jetbrains.kotlin') {
                    details.useVersion Versions.kotlin
                }
            }
        }
    }
}

buildscript {
    ext.isCiBuild = System.getenv("CI") == 'true'

    repositories {
        google()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
    }

    dependencies {
        classpath Plugins.android
        classpath Plugins.kotlin
        classpath Plugins.versioning
    }

    configurations.all {
        resolutionStrategy {
            eachDependency { details ->
                // Force all of the Kotlin libraries to use the same version
                if (details.requested.group == 'org.jetbrains.kotlin') {
                    details.useVersion Versions.kotlin
                }
            }
        }
    }
}

def isNonStable = { String version ->
    def isAlpha = ['alpha'].any { it -> version.contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return isAlpha && !(version ==~ regex)
}

dependencyUpdates {
    // Example 1: reject all non stable versions
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

def propOrEmpty(String name) {
    return hasProperty(name) ? getProperty(name) : ''
}

task clean(type: Delete) {
    delete rootProject.buildDir
}